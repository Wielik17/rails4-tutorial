#### {% title "Konfiguracja" %}

# Konfiguracja

W użyciu jest wiele implementacji i wersji języka 
Ruby: Ruby MRI w wersjach 1.8.7, 1.9.2, Ruby Enterprise Edition – 1.8.7, 
jRuby – 1.5.0, Rubinius – 1.0.1, MagLev, IronRuby – 1.0.
(Polecenie `rvm list known` wypisuje je wszystkie.)
Wynika to z popularności frameworka Ruby on Rails.

Ruby Version Manager umożliwia zainstalowanie i przełączanie
się między różnymi implementacjami i wersjami języka Ruby.

Zanim zaczniemy pracę z Ruby on Rails powinniśmy
skonfigurować konsolę języka Ruby (**irb**) oraz konsolę 
frameworka Ruby on Rails (**rails console**).

Wygodnie jest też mieć pod ręką dokumentację „online”.


## RVM – Ruby Version Manager

Dlaczego [RVM] [rvm]? 
„RVM helps ensure that all aspects of ruby are completely contained
within user space, strongly encouraging **non-root usage**. Use of RVM
rubies provide a higher level of system security and therefore reduce
risk and overall system downtime. Additionally, since all processes
run as the user, a compromised ruby process will not be able to
compromise the entire system.”

Podstawowe polecenia RVM:

    rvm install ree    # alias ree-1.8.7
    rvm install 1.9.2  # alias ruby-1.9.2
    rvm use ree
    rvm list
    rvm gemset list
    rvm gemset use NAZWA_ZESTAWU
    rvm gemset name

Dodatkowo możemy sprawdzić:

    ruby -v
    which ruby
    rvm env

Dla każdego projektu rails powinniśmy w katalogu głównym aplikacji
umieścić plik *.rvmrc* o następującej zawartości:

<pre>rvm use ree  # albo 1.9.2
rvm --create gemset use <i>nazwa zestawu dla projektu</i>
</pre>

Dlaczego tak należy postępować opisał J. Lecour,
[„Advice on using Ruby, RVM, Passenger, Rails, Bundler, … in development”](http://jeremy.wordpress.com/2010/08/19/ruby-rvm-passenger-rails-bundler-in-development/).

Więcej na ten tema jest na stronie
[RVM: Ruby Version Manager – rvmrc](http://rvm.beginrescueend.com/workflow/rvmrc/).


### Zestawy gemów

W trakcie instalacji dla każdej wersji Rubiego 
tworzone są dwa zestawy gemów (ang. *gemset*):

* **default** (bez nazwy)
* **global**

Do zestawu *global* dodajemy gemy używane we wszystkich projektach:

    rvm gemset use global
    gem install bundler gem_snapshot


### Dodatkowa lektura

Należy jeszcze poczytać o:

* thin, unicorn, rainbows (gemy)
* nginx (serwer www)
* passenger (moduł dla apache i nginx)
* jQuery (biblioteka Javascript)


### Dump & Restore Gems

Wykonujemy snapshot zainstalowanych gemów, np. z *Sigmy*:

    gem snapshot dump --file sigma.yml

W innym środowisku instalujemy te gemy:

    gem snapshot restore --file sigma.yml


## Konfiguracja konsoli

Oto moja konfiguracja konsoli (dla Ruby i dla Rails):

    :::ruby ~/.irbrc
    require 'rubygems'
    require 'wirble'
    require 'hirb'
    # start wirble (with color)
    Wirble.init
    Wirble.colorize
    Hirb.enable
    if ENV.include?('RAILS_ENV') && !Object.const_defined?('RAILS_DEFAULT_LOGGER')
      require 'logger'
      RAILS_DEFAULT_LOGGER = Logger.new(STDOUT)
    end

**Uwaga:** oba gemy – *wirble* i *hirb* – należy dopisać do każdego
pliku *Gemfile* aplikacji Rails.


## Online Documentation

Instalujemy gemy:

    gem install rdoc rdoc-data

Wykonujemy polecenia:

    rdoc-data --install
    gem rdoc --all --overwrite

W katalogu *doc* aplikacji Rails tworzymy katalog *rails* z dokumentacją
API Rails oraz katalog *guides* z_samouczkami:

    rake doc:rails
    rake doc:guides

Zobacz też:

    gem help server

Sprawdzamy jak to działa:

    ri Array#each
    ri validates
    ri ActiveModel::Validations::ClassMethods#validates
    ri find


## Roadmap for Learning Rails

Roadmap specially designed for a beginner to navigate their way to Rails mastery.

{%= image_tag "/images/Learning-Rails-Roadmap.png", :alt => "[Learning Rails Roadmap]" %} 

[Źródło](http://techiferous.com/2010/07/roadmap-for-learning-rails/)


[rvm]: http://rvm.beginrescueend.com/ "Ruby Version Manager"
