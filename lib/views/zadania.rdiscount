#### {% title "Laboratorium" %}

# Laboratorium

Na zaliczenie należy oddać następujące projekty:

* Fortunka.<br/>
  Termin oddania: 26.10.2010.
* Fortunka + CouchDB albo MongoDB.<br/>
  Termin oddania: 9.11.2010.
* Kontakty.<br/>
  Termin oddania: 30.11.2010.

Projekty należy umieścić w osobnych repozytoriach git
na serwerze Sigma.
Nazwy repozytoriów na poszczególne projekty to:

* **fortunka**  
* **fortunka-dbd**
* **kontakty**


# Egzamin 

Na egzamin należy przygotować i uruchomić serwis www wg własnego
pomysłu.  Serwis piszemy w zespołach 4–5 programistów.<br/>
Prezentacje projektów: styczeń 2011.


# FAQ

1. Co będzie jak nie oddam projektu w terminie? 
   *Odpowiedź:* Ocena z laboratorium zostanie obniżona o 1.


## HTML5 & CSS3 & jQuery

[HTML5 Boilerplate](http://html5boilerplate.com/)
is the professional badass's base HTML/CSS/JS template for a fast,
robust and future-proof site.
Sam szablon jest [tutaj](http://github.com/paulirish/html5-boilerplate/).

Przygotować stronę statyczną korzystającą z HTML5 boilerplate.
Dodać do strony przykład z jakąś wtyczką jQuery. Na przykład 
[gMap](http://gmap.nurtext.de/):
*gMap helps you embed Google Maps into your website. 
With only 2 KB in size it is very flexible and highly customizable.*

<blockquote>
<p>
  Blueprint is a CSS framework designed to cut down on your CSS
  development time.
</p>
<p class="author">— Joshua Clayton</p>
</blockquote>

## BlueprintCSS

1\. Przygotować stronę ilustrującą możliwości frameworka
Blueprint. Zacząć od ściągnięcia 
[repozytorium Blueprint] [blueprint-css] z Githuba.

Użyć narzędzia *compress.rb* do wygenerowania własnych 
wersji arkuszy CSS. Przeczytać:
[Blueprint's compress.rb: A Walkthrough](http://joshuaclayton.github.com/article/2009/05/19/blueprint-css-a-walkthrough.html).

2\. Zainstalować rozszerzenie do Firefoksa:
[Dust-Me Selectors](https://addons.mozilla.org/en-US/firefox/addon/5392).
Korzystając z tego rozszerzenia, oczyścić arkusz CSS z nieużywanych
selektorów.

3\. Zwalidować wygenerowany HTML i CSS.

4\. Zainstalować rozszerzenia do przeglądarki Firefox:

   * [Firebug](https://addons.mozilla.org/en-US/firefox/addon/1843) 
   * [YSlow](http://developer.yahoo.com/yslow/).

Użyć Yslow do oceny strony przygotowanej w 1\.


## Fortunka

Dodać paginację do widoku *index*.
Skorzystać z gemu [will_paginate](http://github.com/mislav/will_paginate/tree/rails3).
Wystylizować linki do kolejnych „stron”.
Jak to się robi opisał Vitaly Friedman,
[Pagination Gallery: Examples And Good Practices](http://www.smashingmagazine.com/2007/11/16/pagination-gallery-examples-and-good-practices/) i Mislav Marohnić,
[Samples of pagination styling for will_paginate](http://mislav.uniqpath.com/will_paginate/).

Dodać „AJAX rating“ dla komentarzy.
Skorzystać z jakiejś gotowej wtyczki lub gemu.

Obejrzeć screencast R. Batesa [Simple Form](http://railscasts.com/episodes/234-simple-form).
Zamienić wygenerowane formularze na formularze korzystajęce
z gemu [simple_form](http://github.com/plataformatec/simple_form).

Dodać autentykację do fortunki. Zrobić to tak jak, to
przedstawił R. Bates w *OmniAuth*
[Part 1](http://railscasts.com/episodes/235-omniauth-part-1)
[Part_2](http://railscasts.com/episodes/236-omniauth-part-2).
Albo skorzystać z [Janrain Engage](http://www.janrain.com/products/engage).
Jak to zrobić można obejrzeć na screencaście
R. Batesa [Engage with Devise](http://railscasts.com/episodes/233-engage-with-devise).


## Fortunka + CouchDB / MongoDB

Użyć w Fortunce dokumentową bazą danych, np. CouchDB albo MongoDB.


<blockquote>
 <p>
  {%= image_tag "/images/wesole_kontakty.jpg", :alt => "[wesołe kontakty]" %}
 </p>
 <p class="author">Wesołe kontakty</p>
</blockquote>

## Aplikacja „Kontakty”

Aplikacja *kontakty* powinna umożliwiać wpisywanie, edycję kontaktów.

Aplikacja powinna zawierać model *AddressBook* oraz inne konieczne do
działania modele. W bazie umieścić następujące dane: imię, nazwisko,
email, url strony www, adres.

Użyć rozszerzenia YSLow (*Firefox*) albo Speed Tracer (*Google Chrome*) 
„to identify and fix performance problems in your web applications”.

<blockquote>
 <p>
  Have you ever even bothered to Google for “rails html template”? 
 </p>
 <p class="author">— Dr Nic</p>
</blockquote>

1\. Do aplikacji dodać *gravatary*. 
Skorzystać z jakiegoś gemu lub jakiejś wtyczki.

Albo zamiast wtyczki skorzystać z pomysłu przedstawionego
w [Cropping Images](http://railscasts.com/episodes/182-cropping-images).
W screencaście, R. Bates pokazuje jak
dodać do aplikacji zgrabny interfejs umożliwiający przycinanie 
obrazków przed umieszczeniem ich w bazie danych.
Dodać taką funkcjonalność do budowanej aplikacji.

2\. Zmodyfikować formularz aplikacji tak aby korzystał
z [Fancy Sliding Form with jQuery](http://tympanus.net/codrops/2010/06/07/fancy-sliding-form-with-jquery/)
albo z czegoś podobnego w działaniu.

<blockquote>
<p>
  We send down exactly one .js and one .css file. If you are sending
  down more than one of each of these to the browser, you have a
  performance problem. Fix it with asset packager.
</p>
<p class="author">— Pivotal Labs</p>
</blockquote>

3\. Skompresować *static assets* za pomocą wtyczki
[Asset Packager] [asset-packager]: 
„JavaScript and CSS Asset Compression for **Production** Rails Apps.”

Korzystając z rozszerzenia YSlow albo Speed Tracer sprawdzić wydajność
aplikacji przed i po instalacji tej wtyczki.
Opisać różnice w pliku README.

4\. Wersja 3.5 Firefoxa obsługuje 
[W3C Geolocation API](http://dev.w3.org/geo/api/spec-source.html).
Korzystając z któregoś z gemów polecanych na stronie
[The Ruby Toolbox](http://www.ruby-toolbox.com/categories/geocoding___maps.html)
dodać geolokację do aplikacji.

5\. Dodać możliwośc dodawania tagów.  Na przykład takich: praca,
rodzina, znajomi, przypadkowi znajomi, uczelnia, wojsko, pizzeria, biblioteka itp.

* Zaimplementować tagowanie tak jak to jest pokazane na screencaście 
  [More on Virtual Attributes](http://railscasts.com/episodes/167-more-on-virtual-attributes).
* Jeszcze raz tagowanie, ale tym razem skorzystać z wtyczki/gemu
  [acts-as-taggable-on](http://github.com/mbleigh/acts-as-taggable-on/).
  Autorem jest Michael Bleigh. Cytat:
  A tagging plugin for Rails applications that allows for custom 
  tagging along dynamic contexts.

6\. Dodać „tags cloud”. Skorzystać z wtyczki jQuery
  [Tag Cloud](http://rohitsengar.cueblocks.net/jquery-tag-cloud-plugin/)
  albo czegoś podobnego.

7\. Dodać wyszukiwanie: nazwisko lub imię.

8\. Dodać wyszukiwanie po tagach.


<blockquote>
{%= image_tag "/images/martin-fowler.jpg", :alt => "[Martin Fowler]" %}
<p>
  Often when you come across something new it can be a good idea to
  overuse it in order to find out it's boundaries. This is a quite
  reasonable learning strategy. It's also why people always tend to
  overuse new technologies or techniques in the early days. People
  often criticize this but it's a natural part of learning. If you
  don't push something beyond its boundary of usefulness how do you
  find where that boundary is? The important thing is to do so in a
  relatively controlled environment so you can fix things when you
  find the boundary. (After all until we tried it I thought XML would
  be a good syntax for build files.)
</p>
<p class="author">- Martin Fowler</p>
</blockquote>

## Stylizacja Leniwca

1\. Do strony z wynikami wyszukiwania dodać paginację.
Skorzystać z gemu 
[mislav-will-paginate](http://github.com/mislav/will_paginate/).

2\. Do wyszukiwarki dodać select-menu z listą języków
obsługiwanych przez gem *Ultraviolet*
(`uv -l syntaxes`). Zmodyfikować kod *leniwca.local*, tak aby
było możliwe wyszukiwanie fragmentów kodu z wybranego
języka. Wskazówka: objerzeć screencast 
[Advanced Search Form](http://railscasts.com/episodes/111-advanced-search-form)
Uwaga: na liście języków umieścić „Wszystkie języki”,
„Języki skryptowe“ i „Języki kompilowane”.

3\. Wpisać listę wszystkich języków do tabelki *languages*.
Do select-menu pobrać tę listę z tej tabelki.

4\. Dodać „full text search”. Wykorzystać gem 
[xapit](http://github.com/ryanb/xapit/) albo
[thinking-sphinx](http://github.com/freelancing-god/thinking-sphinx/).
Przykład korzystający *thinking-sphinx* można obejrzeć
na screencaście R. Batesa, 
[Thinking Sphinx](http://railscasts.com/episodes/120-thinking-sphinx).

5\. Użyć innego ORM, np. Datamapper
\([przykład](http://github.com/dkubb/datamapper-on-rails/)\).


## Shoutbox

Przeczytać 
[From CodeIgniter to Ruby on Rails: A Conversion](http://net.tutsplus.com/tutorials/ruby/from-codeigniter-to-ruby-on-rails-a-conversion/).

Przepisać aplikację *Shoutbox* na Rails 3. Zamiast MySQL użyć
SQLite albo Postgresql.


Zadanie ekstra: Uruchomić aplikację *Shoutbox* według opisu
[Shoutbox with Grasshopper and CouchDB](http://howtonode.org/grasshopper-shoutbox).


## Z życia leniwców

[A code snippet tool, intended for localhost usage](http://github.com/navyrain/navysnip/).
Add the following:

* Command line submission script
* Doubleclick to select all
* Submit-to-pastie button
* Search
* Add Rails-ish parsers to SHJS (erb, haml, sass)
* Tweak the PRE CSS or do something clever with wrapping 
  to make long lines display nicely


## Photo Album

1\. [Extremely Simple Photo Album in 
  Rails](http://rubyplus.org/episodes/92-Extremely-Simple-Photo-Album-in-Rails.html)

* You can extend this album so that the photo upload does not tie up
  the Mongrel process by using Background DRB, Merb etc.
* Add the feature where users can only add/edit photos to their album.
* When a photo is added instead of displaying the album index page,
  display the album show page so that users can continue uploading
  photos.


## JSON, XML 

1\. [Faker.js](http://github.com/marak/Faker.js) —
generate massive amounts of fake data in Node.js and the browser.

Korzystając z Faker.js umieścić przykłądowe dane w bazie aplikacji
Rails.  To samo, ale dane umieścić w *seed.rb*, a same dane zapisać
w bazie:

    rake db:seed

2\. Przeczytać [Ruby Libxml Tutorial - Reader API](http://anurag-priyam.blogspot.com/2010/05/ruby-libxml-tutorial-reader-api.html)
i skorzystać.


## Redis

Cytat, [Redweb: A Web Interface for Redis](http://philosophyofweb.com/2010/02/redweb-a-web-interface-for-redis/):
„In my opinion, Redis is a superb option for a number of different use
cases (web bookmarks/tags, working with data locally, and much more).”

Sprawdzamy, czy tak jest. Zaczynamy od instalacji  
[Redisa](http://github.com/antirez/redis) i [Redweb](http://github.com/tnm/redweb).

1\. Aplikacja „Bookmarks”. Inne przykłady:

* [NoSQL Twitter Applications](http://nosql.mypopescu.com/post/319859407/nosql-twitter-applications)
* [A NoSQL Use Case: URL Shorteners](http://nosql.mypopescu.com/post/597603446/a-nosql-use-case-url-shorteners)
* [Usecase: NoSQL-based Blogs](http://nosql.mypopescu.com/post/346471814/usecase-nosql-based-blogs)

2\. Node.JS + Redis + Pygments: [Snip](http://bitbucket.org/nikhilm/snip/src/).



#### Links

[blueprint-css]: http://github.com/joshuaclayton/blueprint-css "A CSS framework"
[haml]: http://haml-lang.com/ "HAML: markup haiku"
[sass]: http://sass-lang.com/ "Sass makes CSS fun again"
[asset-packager]: http://github.com/sbecker/asset_packager "CSS and Javascript asset packager"
[compass]: http://github.com/chriseppstein/compass "A CSS stylesheet authoring environment"
