#### {% title "Podstawy emailowania w Ruby" %}

# Wysyłanie poczty w Ruby

Wysyłając pocztę musimy programowi pocztowemu podać swoje dane: login
i hasło. Jeśli pocztę wysyłamy z aplikacji Rails, to musimy wcześniej
nasze dane umieścić gdzieś w kodzie. Jeśli kod trzymamy w repozytorium,
to musimy zadbać, aby nasze dane nie znalazły się gdzieś w chmurze,
na przykład na Githubie.

W przykładach poniżej swoje dane będę czytał z pliku *smtp.yml*,
który umieszczę poza repozytorium
w katalogu *$HOME/.credentials/* albo (dla aplikacji Rails)
nazwę pliku dodam do pliku *.gitignore*, a sam plik skopiuję
do katalogu *config/initializers/*.

Do wysyłania poczty użyję programu *sendmail*.

Oto przykładowy plik z danymi (w formacie [YAML](http://www.yaml.org/)),
dla konta pocztowego na *gmail.com* i konta – na *sigmie*):

    :::yaml smtp.yml
    development:
      address: smtp.gmail.com
      domain: gmail.com
      port: 587
      user_name: ‹login›
      password: ‹hasło›
      authentication: plain
      host: localhost:3000

    production:
      address: inf.ug.edu.pl
      domain: ug.edu.pl
      port: 25
      user_name: ‹login›
      password: ‹hasło›
      authentication: login
      host: sigma.ug.edu.pl:3000

Do wysłania poczty, możemy użyć takiego skryptu:

    :::ruby gmail.rb
    # -*- coding: utf-8 -*-
    require 'mail'
    require 'yaml'

    raw_config = File.read("#{ENV['HOME']}/.credentials/smtp.yml")
    SMTP_CONFIG = YAML.load(raw_config)['development'].symbolize_keys

    Mail.defaults do
      delivery_method :smtp, {
        :address => SMTP_CONFIG[:address],
        :port => SMTP_CONFIG[:port],
        :domain => SMTP_CONFIG[:domain],
        :user_name => SMTP_CONFIG[:user_name],
        :password => SMTP_CONFIG[:password],
        :authentication => SMTP_CONFIG[:authentication],
        :enable_starttls_auto => true
      }
    end

    mail = Mail.new do
      to 'matwb@ug.edu.pl'
      from 'wlodek.bzyl@gmail.com'
      subject 'Tę wiadomość wysłano z Gmail'
      body File.read('body.txt')
      add_file :filename => 'butterfly.jpg', :content => File.read('images/butterfly.jpg')
    end

    mail.deliver!

**Uwaga:** Jeśli na *localhost* działa *sendmail*,
to możemy pominąć całą konfigurację SMTP
(zob. {%= link_to "localhost.rb", "/mail/localhost.rb" %}).


# Wysyłanie poczty w Rails

Zaczynamy od wygenerowania rusztowania dla aplikacji Rails:

    rails new mailit
    cd mailit

Użyjemy pliku *Gemfile* z Fortunki v1.0 do którego dopiszemy:

Teraz kolej na model:

    bundle install --path=.bundle/gems
    rails g jquery:install
    rails g simple_form:install
    rails g nifty:layout
    rails g scaffold user username:string email:string password:string password_confirmation:string
    rake db:migrate

Wchodzimy na stronę:

    localhost:3000/users/new

gdzie dodajemy jedengo użytkownika.


## Co chcemy osiągnąć?

Po wejściu na stronę

    http://localhost:3000/users/new

wpisaniu danych do formularza i kliknięciu przycisku „Create User”
aplikacja ma wysłać na podany email.


## Konfiguracja *ActionMailer*

Zaczynamy od konfiguracji programu pocztowego:

    rails g nifty:config mail
      create  config/initializers/load_mail_config.rb
      create  config/mail_config.yml

Dopisujemy do pliku *.gitignore*:

    config/mail_config.yml

Następnie wpisujemy do niego nasze dane.

Konfiguracja SMTP:

    :::ruby config/initializers/load_mail_config.rb
    raw_config = File.read("#{Rails.root}/config/mail_config.yml")
    MAIL_CONFIG = YAML.load(raw_config)[Rails.env].symbolize_keys

    ActionMailer::Base.smtp_settings = {
      :address => SMTP_CONFIG[:address],
      :port => SMTP_CONFIG[:port],
      :domain => SMTP_CONFIG[:domain],
      :user_name => SMTP_CONFIG[:user_name],
      :password => SMTP_CONFIG[:password],
      :authentication => SMTP_CONFIG[:authentication],
      :enable_starttls_auto => true
    }

Konfiguracja hosta:

    :::ruby config/environments/development.rb
    config.action_mailer.raise_delivery_errors = true
    config.action_mailer.default_url_options = {
      :host => '127.0.0.1',
      :port => 3000
    }

(*production.rb* – później)


## Stub out a new mailer and its views

Wygląda to tak:

    rails generate mailer user_mailer
      create  app/mailers/user_mailer.rb
       invoke  erb
       create    app/views/user_mailer

Wygenerowany kod:

    :::ruby app/mailers/user_mailer.rb
    class UserMailer < ActionMailer::Base
      default :from => "from@example.com"
    end

Zmieniamy na:

    :::ruby app/mailers/user_mailer.rb
    class UserMailer < ActionMailer::Base
      default :from => "wbzyl@inf.ug.edu.pl"
      def registration_confirmation(user)
        @user = user # użyjemy w szablonie wiadomosści
        attachments["rails.png"] = File.read("#{Rails.root}/public/images/rails.png")
        mail(:to => user.email, :subject => "Registered")
      end
    end

Tworzymy powiązany widok:

    :::html_rails app/views/user_mailer/registration_confirmation.text.erb
    <%= @user.username %>,
    Thank you for registering!

Powyższą wiadomość aplikacja powinna wysłać po utworzeniu
nowego użytkownika. Oto kod który to robi:

    :::ruby
    UserMailer.registration_confirmation(@user).deliver

Należy go wstawić do metody *create* kontrolera *UsersController*:

    :::ruby app/controllers/users_controller.rb
    def create
      @user = User.new(params[:user])
      if @user.save
        UserMailer.registration_confirmation(@user).deliver
        flash[:notice] = 'User was successfully created.'
      end
      respond_with(@user)
    end


## Przechodzimy na wysyłanie wiadomości HTML

Usuwamy szablon wiadomości tekstowej:

    rm app/views/user_mailer/registration_confirmation.text.erb

i przechodzimy na HTML:

    :::html_rails app/views/user_mailer/registration_confirmation.html.erb
    <h3><%= @user.username %></h3>
    <p>Thank you for registering!</p>
    <p>Edit Profile: <%= link_to "Click me!", edit_user_url(@user, :host => MAIL_CONFIG[:host]) %></p>

Gotowe!

*Actionmailer* nic nie wie na jakim hoście uruchomiona jest aplikacja.
Wysyłanie poczty jest *decoupled* od kodu aplikacji.
Dlatego, musimy jakoś powiedzieć metodzie pomocniczej
*edit_usr_url* na jakim hoście działa nasza aplikacja.

W zasadzie, jeśli opiekujemy się kilkoma aplikacjami rails, to
autentykację moglibyśmy napisac raz. Coś w stylu *simple omniauth*!
Jeśli by tak było, to zmienna *host* powinna wskazywać na tę
aplikację.


## Mail interceptors & observers

W trakcie *development*…

W tym pliku wstawiamy interceptor:

    :::ruby cat hello/rails3-authlogic/config/initializers/setup_mail.rb
    class DevelopmentMailInterceptor
      def self.delivering_email(message)
        message.subject = "[#{message.to}] #{message.subject}"
        message.to = "matwb@ug.edu.pl"
      end
    end
    ActionMailer::Base.default_url_options[:host] = MAIL_CONFIG[:host]
    ActionMailer::Base.register_interceptor(DevelopmentMailInterceptor) if Rails.env.development?

Obserwer też się przyda: po wysłaniu poczty możemy sobie,
tę informacje zapisac w logoach (chociaż już tam jest)

Używamy Obserwers do decoupling wysyłania poczty!



Potrzebne? Ponieważ katalog *lib* nie jest w ścieżce *$LOAD_PATH* dopisujemy go w pliku
konfiguracyjnym aplikacji:

    :::ruby config/application.rb
    config.autoload_paths += %W(#{config.root}/lib)


## Trochę podręcznych linków:

* [ActionMailer::Base](http://apidock.com/rails/ActionMailer/Base)
* [Observers](file:///home/wbzyl/github.com/rails/railties/guides/output/active_record_validations_callbacks.html#callbacks-overview)

Jak wysyłać email z aplikacji można obejrzeć na screencaście
Ryana Batesa [Action Mailer in Rails 3](http://railscasts.com/episodes/206-action-mailer-in-rails-3).
