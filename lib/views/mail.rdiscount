#### {% title "Podstawy emailowania w Ruby" %}

# TODO: Podstawy emailowania w Ruby

Przerobić kilka skryptów.


# eMailowanie w Rails

Jak wysyłać email z aplikacji można obejrzeć na screencaście
Ryana Batesa [Action Mailer in Rails 3](http://railscasts.com/episodes/206-action-mailer-in-rails-3).

Poniżej ten przykład z dodatkami wspomnianymi przez Ryana.

Zaczynamy:

    rails new mailit
    cd mailit

Do pliku *Gemfile* dopisujemy:

    :::ruby
    gem "mail"
    gem "nifty-generators"
    gem "thin"


Teraz kolej na (dodałem pola: password oraz password_confirmation):

    bundle install
    rails g nifty:layout
    rails g nifty:scaffold user username:string email:string password:string password_confirmation:string
    rake db:migrate
    rails s thin

Po wejściu na stronę

    http://localhost:3000/users/new**

wpisaniu danych do formularza i kliknięciu przycisku „Create User”
aplikacja ma wysłać na podany email email.

## JTZ – konfiguracja

Zaczynamy od inicjalizacji zmiennych z których korzysta program do
wysłania poczty:

    :::ruby /config/initializers/setup_mail.rb
    ActionMailer::Base.smtp_settings = {
      :address              => MAIL_CONFIG[:address],
      :port                 => MAIL_CONFIG[:port],
      :domain               => MAIL_CONFIG[:domain],
      :user_name            => MAIL_CONFIG[:user_name],
      :password             => MAIL_CONFIG[:password],
      :authentication       => MAIL_CONFIG[:authentication],
      :enable_starttls_auto => true
    }
    ActionMailer::Base.default_url_options[:host] = MAIL_CONFIG[:host]

**Uwaga:** Setting *ActionMailer::Base.default_url_options directly*
is now deprecated, use the configuration option to set
the default host:

    :::ruby config/application.rb
    config.action_mailer.default_url_options = { :host => MAIL_CONFIG[:host] }

Oczywiście ukryliśmy „sensitive data”. Zrobiłem to tak:

    rails g nifty:config mail

W wygenerowanym pliku *mail_config.yml* dopisałem w *development*
coś takiego (przykład konfigurowacji konto na Gmailu):

    :::ruby config/mail_config.yml
    development:
      address: smtp.gmail.com
      port: 587
      domain: gmail.com
      user_name: wbzyl
      password: sekret
      authentication: plain
      host: localhost:3000

    test:
      domain: localhost:3000

    production:
      domain: sigma.ug.edu.pl
      user_name: wbzyl
      ... uzupełnić ...
      host: localhost:8064

Drugi wygenerowany plik pozostawiamy bez zmian
(albo przenosimy plik *mail_config.yml* w inne, bezpieczne miejsce):

    :::ruby config/initializers/load_mail_config.rb
    raw_config = File.read("#{Rails.root}/config/mail_config.yml")
    MAIL_CONFIG = YAML.load(raw_config)[Rails.env].symbolize_keys

## Mailer

Skorzystamy z generatora:

    rails g mailer user_mailer

Zmieniamy wygenerowany kod na:

    :::ruby app/mailers/user_mailer.rb
    class UserMailer < ActionMailer::Base
      def registration_confirmation(user)
        mail(:to => user.email, :subject => "Registered", :from => "matwb@ug.edu.pl")
      end
    end

a po krótkim zastanowieniu na:

    :::ruby app/mailers/user_mailer.rb
    class UserMailer < ActionMailer::Base
      default :from => "matwb@ug.edu.pl"

      def registration_confirmation(user)
        @user = user
        attachments["rails.png"] = File.read("#{Rails.root}/public/images/rails.png")
        mail(:to => user.email, :subject => "Registered")
      end
    end

Treść wysyłanego emaila umieszczamy w pliku:

    :::html_rails /app/views/user_mailer/registration_confirmation.text.erb
    <%= @user.username %>,
    Thank you for registering!
    Edit Profile: <%= edit_user_url(@user, :host => MAIL_CONFIG[:host]) %>

Uwaga: *Mail* nic nie wie na jakim hoście uruchomiona jest aplikacja.

Kod wysyłający pocztę umieścimy dopisując w metodzie *create* kontrolera
*UserController* (dlaczego w tej metodzie?):

    :::ruby app/controllers/users_controller.rb
    def create
      @user = User.new(params[:user])
      if @user.save
        UserMailer.registration_confirmation(@user).deliver
        ... dalej bez zmian ...

## Mail interceptors

    :::ruby lib/development_mail_interceptor.rb
    class FortuneMailInterceptor
      def self.delivering_email(message)
        message.subject = "[#{message.to}] #{message.subject}"
        message.to = "matwb@ug.edu.pl"
      end
    end
    ActionMailer::Base.register_interceptor(FortuneMailInterceptor) if Rails.env.development?

Ponieważ katalog *lib* nie jest w ścieżce *$LOAD_PATH* dopisujemy go w pliku
konfiguracyjnym aplikacji:

    :::ruby config/application.rb
    config.autoload_paths += %W(#{config.root}/lib)



# Stare notatki

Może się to do czegoś przyda.

## Przypominanie hasła – korzystamy z poczty

Konfiguracja:

    :::yaml config/mailer_config.yml
    development:
      domain: localhost:3000
      host: localhost:3000
      address: smtp.gmail.com
      port: 587
      user_name: <login>
      password: <password>
      authentication: plain

    test:
      domain: localhost:3000

    production:
      domain: localhost:3000
      host: sigma.ug.edu.pl:3000
      address: inf.ug.edu.pl
      port: 25
      user_name: <login>
      password: <password>
      authentication: login

**Dlaczego zmienne wpisujemy w osobnym pliku?**

Używamy stałej globalnej:

    :::ruby config/initializers/load_mailer_config.rb
    raw_config = File.read("#{Rails.root}/config/mailer_config.yml")
    MAILER_CONFIG = YAML.load(raw_config)[Rails.env].symbolize_keys

Konfigurujemy SMTP:

    :::ruby config/initializers/setup_mail.rb
    ActionMailer::Base.smtp_settings = {
      :address              => MAILER_CONFIG[:address],
      :port                 => MAILER_CONFIG[:port],
      :domain               => MAILER_CONFIG[:domain],
      :user_name            => MAILER_CONFIG[:user_name],
      :password             => MAILER_CONFIG[:password],
      :authentication       => MAILER_CONFIG[:authentication],
      :enable_starttls_auto => true
    }
    ActionMailer::Base.default_url_options[:host] = MAILER_CONFIG[:host]

Wygodne w development:

    :::ruby lib/development_mail_interceptor.rb
    class FortuneMailInterceptor
      def self.delivering_email(message)
        message.subject = "[#{message.to}] #{message.subject}"
        message.to = "matwb@ug.edu.pl"
      end
    end
    ActionMailer::Base.register_interceptor(FortuneMailInterceptor) if Rails.env.development?

Musimy jeszcze dodać katalog *lib* do ścieżki wyszukiwania:

    :::ruby config/application.rb
    module Fortunka
      class Application < Rails::Application
        # Custom directories with classes and modules you want to be autoloadable.
        # config.autoload_paths += %W(#{config.root}/extras)
        config.autoload_paths += %W(#{config.root}/lib)
