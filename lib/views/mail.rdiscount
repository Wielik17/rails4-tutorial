#### {% title "Podstawy emailowania w Ruby" %}

# Podstawy emailowania w Ruby

Wysyłając pocztę musimy programowi pocztowemu podać swoje dane: login
i hasło. Jeśli pocztę wysyłamy z aplikacji Rails, to musimy wcześniej
nasze dane umieścić gdzieś w kodzie. Jeśli kod trzymamy w repozytorium,
to musimy zadbać, aby nasze dane nie znalazły się gdzieś w chmurze,
na przykład na Githubie.

W przykładach poniżej swoje dane będę czytał z pliku *smtp.yml*,
który umieszczę poza repozytorium
w katalogu *$HOME/.credentials/* albo (dla aplikacji Rails)
nazwę pliku dodam do pliku *.gitignore*, a sam plik skopiuję
do katalogu *config/initializers/*.

Do wysyłania poczty użyję programu *sendmail*.

Oto przykładowy plik z danymi (w formacie [YAML](http://www.yaml.org/)),
dla konta pocztowego na *gmail.com* i konta – na *sigmie*):

    :::yaml smtp.yml
    development:
      address: smtp.gmail.com
      domain: gmail.com
      port: 587
      user_name: ‹login›
      password: ‹hasło›
      authentication: plain
      host: localhost:3000

    production:
      address: inf.ug.edu.pl
      domain: ug.edu.pl
      port: 25
      user_name: ‹login›
      password: ‹hasło›
      authentication: login
      host: sigma.ug.edu.pl:3000

Do wysłania poczty, możemy użyć takiego skryptu:

    :::ruby gmail.rb
    # -*- coding: utf-8 -*-
    require 'mail'
    require 'yaml'

    raw_config = File.read("#{ENV['HOME']}/.credentials/smtp.yml")
    SMTP_CONFIG = YAML.load(raw_config)['development'].symbolize_keys

    Mail.defaults do
      delivery_method :smtp, {
        :address => SMTP_CONFIG[:address],
        :port => SMTP_CONFIG[:port],
        :domain => SMTP_CONFIG[:domain],
        :user_name => SMTP_CONFIG[:user_name],
        :password => SMTP_CONFIG[:password],
        :authentication => SMTP_CONFIG[:authentication],
        :enable_starttls_auto => true
      }
    end

    mail = Mail.new do
      to 'matwb@ug.edu.pl'
      from 'wlodek.bzyl@gmail.com'
      subject 'Tę wiadomość wysłano z Gmail'
      body File.read('body.txt')
      add_file :filename => 'butterfly.jpg', :content => File.read('images/butterfly.jpg')
    end

    mail.deliver!

**Uwaga:** Jeśli na *localhost* działa *sendmail*,
to możemy pominąć całą konfigurację SMTP
(zob. {%= link_to "localhost.rb", "/mail/localhost.rb" %}).


# eMailowanie w Rails

Trochę podręcznych linków:

* [Mailer Models](http://api.rubyonrails.org/classes/ActionMailer/Base.html)

Railsy Gem *mail*


Jak wysyłać email z aplikacji można obejrzeć na screencaście
Ryana Batesa [Action Mailer in Rails 3](http://railscasts.com/episodes/206-action-mailer-in-rails-3).

Poniżej ten przykład z dodatkami wspomnianymi przez Ryana.

Zaczynamy od wygenerowania rusztowania dla aplikacji Rails:

    rails new mailit
    cd mailit

Użyjemy pliku *Gemfile* z Fortunki v1.0 do którego dopiszemy:

    :::ruby
    gem "mail"

Teraz kolej na model:

    bundle install
    rails g nifty:layout
    rails g scaffold user username:string email:string password:string password_confirmation:string
    rake db:migrate


## Co chcemy osiągnąć?

Po wejściu na stronę

    http://localhost:3000/users/new

wpisaniu danych do formularza i kliknięciu przycisku „Create User”
aplikacja ma wysłać na podany email email.


## Konfiguracja SMTP

Wygląda to nieco inaczej w Rails niż w samym Ruby.

Zaczynamy od inicjalizacji zmiennych z których korzysta program do
wysłania poczty:

    :::ruby /config/initializers/setup_mail.rb
    ActionMailer::Base.smtp_settings = {
      :address              => MAIL_CONFIG[:address],
      :port                 => MAIL_CONFIG[:port],
      :domain               => MAIL_CONFIG[:domain],
      :user_name            => MAIL_CONFIG[:user_name],
      :password             => MAIL_CONFIG[:password],
      :authentication       => MAIL_CONFIG[:authentication],
      :enable_starttls_auto => true
    }
    ActionMailer::Base.default_url_options[:host] = MAIL_CONFIG[:host]

**Uwaga:** Setting *ActionMailer::Base.default_url_options directly*
is now deprecated, use the configuration option to set
the default host:

    :::ruby config/application.rb
    config.action_mailer.default_url_options = { :host => MAIL_CONFIG[:host] }

Oczywiście ukryliśmy „sensitive data”. Zrobiłem to tak:

    rails g nifty:config mail

W wygenerowanym pliku *mail_config.yml* dopisałem w *development*
coś takiego (przykład konfigurowacji konto na Gmailu):

    :::ruby config/mail_config.yml
    development:
      address: smtp.gmail.com
      port: 587
      domain: gmail.com
      user_name: wbzyl
      password: sekret
      authentication: plain
      host: localhost:3000

    test:
      domain: localhost:3000

    production:
      domain: sigma.ug.edu.pl
      user_name: wbzyl
      ... uzupełnić ...
      host: localhost:8064

Drugi wygenerowany plik pozostawiamy bez zmian
(albo przenosimy plik *mail_config.yml* w inne, bezpieczne miejsce):

    :::ruby config/initializers/load_mail_config.rb
    raw_config = File.read("#{Rails.root}/config/mail_config.yml")
    MAIL_CONFIG = YAML.load(raw_config)[Rails.env].symbolize_keys

## Mailer

Skorzystamy z generatora:

    rails g mailer user_mailer

Zmieniamy wygenerowany kod na:

    :::ruby app/mailers/user_mailer.rb
    class UserMailer < ActionMailer::Base
      def registration_confirmation(user)
        mail(:to => user.email, :subject => "Registered", :from => "matwb@ug.edu.pl")
      end
    end

a po krótkim zastanowieniu na:

    :::ruby app/mailers/user_mailer.rb
    class UserMailer < ActionMailer::Base
      default :from => "matwb@ug.edu.pl"

      def registration_confirmation(user)
        @user = user
        attachments["rails.png"] = File.read("#{Rails.root}/public/images/rails.png")
        mail(:to => user.email, :subject => "Registered")
      end
    end

Treść wysyłanego emaila umieszczamy w pliku:

    :::html_rails /app/views/user_mailer/registration_confirmation.text.erb
    <%= @user.username %>,
    Thank you for registering!
    Edit Profile: <%= edit_user_url(@user, :host => MAIL_CONFIG[:host]) %>

Uwaga: *Mail* nic nie wie na jakim hoście uruchomiona jest aplikacja.

Kod wysyłający pocztę umieścimy dopisując w metodzie *create* kontrolera
*UserController* (dlaczego w tej metodzie?):

    :::ruby app/controllers/users_controller.rb
    def create
      @user = User.new(params[:user])
      if @user.save
        UserMailer.registration_confirmation(@user).deliver
        ... dalej bez zmian ...

## Mail interceptors

W tym pliku wstawiamy interceptor:

    :::ruby cat hello/rails3-authlogic/config/initializers/setup_mail.rb
    ActionMailer::Base.smtp_settings = {
      :address              => MAIL_CONFIG[:address],
      :port                 => MAIL_CONFIG[:port],
      :domain               => MAIL_CONFIG[:domain],
      :user_name            => MAIL_CONFIG[:user_name],
      :password             => MAIL_CONFIG[:password],
      :authentication       => MAIL_CONFIG[:authentication],
      :enable_starttls_auto => true
    }
    ActionMailer::Base.default_url_options[:host] = MAIL_CONFIG[:host]
    ActionMailer::Base.register_interceptor(DevelopmentMailInterceptor) if Rails.env.development?

A nie w tym!

    :::ruby lib/development_mail_interceptor.rb
    class FortuneMailInterceptor
      def self.delivering_email(message)
        message.subject = "[#{message.to}] #{message.subject}"
        message.to = "matwb@ug.edu.pl"
      end
    end
    # tutaj psuje i18n!
    ActionMailer::Base.register_interceptor(FortuneMailInterceptor) if Rails.env.development?

Ponieważ katalog *lib* nie jest w ścieżce *$LOAD_PATH* dopisujemy go w pliku
konfiguracyjnym aplikacji:

    :::ruby config/application.rb
    config.autoload_paths += %W(#{config.root}/lib)
